자바스크립트의 실행컨텍스트 과정

#실행컨텍스트
문맥.코드의 실행환경
Scope,hosting,this,function,closure 등의 동작원리를 담고 있는 자바스크립트의 핵심원리
실행가능한 코드를 형상화하고 구분하는 추상적인 개념
=>실행 가능한 코드가 실행되기 위해 필요한 환경
*실행가능한 코드:전역코드,eval코드,함수코드

#실행컨텍스트 과정
1. 스택은 LIFO(Last In First Out, 후입 선출)의 구조를 가지는 나열 구조이다
2. 전역 코드(Global code)로 컨트롤이 진입하면 전역 실행 컨텍스트가 생성되고 실행 컨텍스트 스택에 쌓인다. 전역 실행 컨텍스트는 애플리케이션이 종료될 때(웹 페이지에서 나가거나 브라우저를 닫을 때)까지 유지된다.
3. 함수를 호출하면 해당 함수의 실행 컨텍스트가 생성되며 직전에 실행된 코드 블록의 실행 컨텍스트 위에 쌓인다.
4. 함수 실행이 끝나면 해당 함수의 실행 컨텍스트를 파기하고 직전의 실행 컨텍스트에 컨트롤을 반환한다. 
#전역 컨텍스트
코드를 실해하는 순간 모든 것을 포함하고 관리하는 환경/페이지가 종료될때까지 유지됨
 변수객체,scope chain,this가 들어온다.
 전역 컨텍스트는 arguments가 없고 variable로서 해당 스코프의 변수들이 있다.:name,wow,say
Scope chain은 자기 자신인 전역 변수객체들로서 this는 따로 설정되어있지않으면 window이다.
this를 바꾸기위해  new를 호출하거나 함수에 다른 this값을 bind한다.

#함수 컨택스트
자바스크립트는 함수 스코프를 따른다. 함수를 호출할때마다 함수 컨택스트가 하나씩 더 생긴다.
전역컨택스트를 생성후 함수를 호출할때마다 컨택스트가 생긴다
컨택스트 생성시 컨택스트안에 변수객체,scope chain,this가 생성된다.
컨텍스트 생성후 함수가 실행되는데 사용되는 변수들은 변수 객체안에서 값을 찾고 없다면 스코프체인을 따라 올라가며 찾는다
함수 실행이 마무리되면 해당 컨텍스트는 사라진다.
페이지가 종료되면 전역 컨텍스트는 사라진다.
Scope chain은 say 변수객체와 상위의 전역 변수객체
this는 window
컨택스트안에서 변수를 찾을수 없다면 상위 변수객체인 전역 변수객체에서 찾는다

https://poiemaweb.com/js-execution-context
https://www.zerocho.com/category/JavaScript/post/5741d96d094da4986bc950a0

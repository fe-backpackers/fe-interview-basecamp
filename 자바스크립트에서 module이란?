개발하는 애플리케이션의 크기가 커질때 파일을 여러개로 분리해둔것->모듈
클래스 하나 혹은 특정한 목적을 가진 복수의 함수로 구성된 라이브러리 하나로 구성됨
파일 하나. 스크립트 하나.
export와 import을 통해 다른 모듈을 불러와 불러온 모듈에 있는 함수를 호출하는 것과 같은 기능 공유 가능
#AMD
가장 오래된 모듈 시스템/require.js라는 라이브러를 통해 처음 개발됨
#CommonJS
Node.js 서버를 위해 만들어진 모듈 시스템
#UMD
Amd와 CommonJS와 같은 다양한 모듈 시스템을 함께 사용하기 위해 만들어짐
#모듈의 기능
-엄격 모드로 실행됨
선언되지 않은 변수에 값을 할당하는 등의 코드는 에러를 발생시킴
-모듈 레벨 스코프
모듈은 자신만의 스코프가 있다
모듈 내부에서 정의한 변수나 함수는 다른 스크립트에서 접근할 수 없다
-단 한 번만 평가됨
최초 호출시 단 한번만 실행됨
어느 한 모듈에서 수정하면 다른 모듈에서도 변경사항을 확인할 수 있다.
-import.meta
현재 모듈에 대한 정보 제공
브라우저 환경에서 스크립트의 url정보를 얻을수 있다.
-this는 undefined
모듈이 아닌 일반 스크립트의 this는 전역객체
#브라우저 특정 기능
-지연 실행
외부 스크립트, 인라인 스크립트와 관계없이 마치 defer 속성을 붙인 것처럼 실행됨
*외부모듈스크립트 <script type="module” src=“..”>를 다운로드할 때 브라우저의 HTML 처리가 멈추지 않고 외부모듈스크립트와 기타 리소스를 병렬적으로 불러옴
*모듈스크립트는 HTML문서가 완전히 준비될때까지 대기 상태에 있다가 HTML 문서가 완전히 만들어진후 실행됨
*스크립트의 상대적 순서가 유지되어 문서상 위쪽의 스크립트부터 차례로 실행됨
#인라인 스크립트의 비동기 처리
Async 속성이 붙은 스크립트는 로딩이 끝나면 다른 스크립트나 HTML문서가 처리되길 기다리지 않고 바로 실행됨



https://ko.javascript.info/modules-intro
